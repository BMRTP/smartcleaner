System smartcleaner

Dispatch explore   : explore(X)
Dispatch suspend   : suspend(X)
Dispatch terminate : terminate(X)

Dispatch cmd      : cmd(X)

Request  step     : step(DURATION)
Request  backstep : backstep(DURATION)
Reply    stepdone : stepdone(X)
Reply    stepfail : stepfail(DURATION)

Request getobstacletype : getobstacletype(X)
Reply   obstacletype    : obstacletype(X)

Request  grab     : grab(X)
Reply    grabbed  : grabbed(X) //true, false

Context ctxDetector ip [ host= "localhost" port= 8022 ]  
Context ctxRobot ip [ host= "127.0.0.1" port= 8018 ]  

ExternalQActor smartrobot context ctxRobot
ExternalQActor obstacleclassifier context ctxRobot
ExternalQActor grabber context ctxRobot

QActor detector context ctxDetector { 
	[" 
	   val resource = itunibo.resource.CoapResourceSupport(name, \"coap://localhost:5683\")
	   val NDB = 10
	   var SpaceAvailable = NDB
	   resource.createProperty(\"SpaceAvailable\", SpaceAvailable.toString())

	   var RoomMap = \"\" 
	   resource.createProperty(\"RoomMap\", RoomMap)

	   val mapname     = \"roomMbot3\"

	   var SidesNum = 0
	   var wasABottle = false
	   //VIRTUAL ROBOT
       var StepTime = 330
	   var BackStepTime = 0
	   var completedPerimeter = false
	   var currentTask = \"\"

	   var posX = 1
       var posY = 1
	   var nextMoves = listOf<String>().iterator()
	   var nextMove = \"\"
		"]
	   
	State start initial {  
		println("detector starts")
		run itunibo.planner.plannerUtil.initAI()
	}
	Goto discoveryHome
	
	State discoveryHome {
		println("waiting for a command...")
	}
	Transition commandReceived
 			whenMsg explore -> exploring
 			whenMsg suspend -> goingHome
 			whenMsg terminate -> terminating
	
	State exploring { 
	  [ "currentTask = \"exploring\"
		val (a, b) = itunibo.planner.plannerUtil.loadRoomMap(\"roomMbot3\")
		if (a > 0 && b > 0) {
			completedPerimeter = true
			RoomMap = itunibo.planner.plannerUtil.getMap()
		    resource.setProperty(\"RoomMap\", RoomMap)
		} "]
	} Goto exploringWithPlan if "(completedPerimeter)" else checkRight
	
	State boundary {
		["posX = itunibo.planner.moveUtils.getPosX(myself)
		  posY = itunibo.planner.moveUtils.getPosY(myself) "]
	}
	Goto boundaryFound if "(completedPerimeter || (posX == 1 && posY == 1 && currentTask == \"exploring\") )" else checkRight
	 
	State checkRight {
		forward smartrobot -m cmd : cmd(d)
		run itunibo.planner.moveUtils.rotateRight90(myself)
		delay 1000
	} Goto doStep
	
	State doStep {			
		request smartrobot -m step : step($StepTime)
	}
	Transition t0   whenReply stepdone -> stepDone   
					whenReply stepfail -> stepFailed
	
	State stepDone {  
 		run itunibo.planner.moveUtils.updateMapAfterAheadOk(myself)
 		run itunibo.planner.plannerUtil.showMap()		
		[" RoomMap = itunibo.planner.plannerUtil.getMap()
		   resource.setProperty(\"RoomMap\", RoomMap) "]		
		delay 1000
 	}
	Goto boundary
	
	State stepFailed {  
 		onMsg(stepfail : stepfail(DURATION)) {
 			println("detector founds an obstacle after ${payloadArg(0)}")
 			["BackStepTime = payloadArg(0).toInt() - 20"] //TODO tune compensation
 			request obstacleclassifier -m getobstacletype : getobstacletype(type)
 		}
	}
	Transition t1
		whenReply obstacletype -> checkObstacleType
    
    State checkObstacleType {
    	onMsg(obstacletype : obstacletype(X)) {
 			println("detector founds ${payloadArg(0)}")
 			if "(payloadArg(0).contains(\"bottle\", ignoreCase = true))" {
 				["wasABottle = true"]
 				if "(SpaceAvailable > 0)" {
 					request grabber -m grab : grab(it)
 				} else {
 					//already dirty cell
 					request smartrobot -m backstep : backstep($BackStepTime)
 				}
 			} else {
 				["wasABottle = false"]
 				run itunibo.planner.moveUtils.setObstacleOnCurrentDirection(myself)
 				request smartrobot -m backstep : backstep($BackStepTime)
 			}
 			[" RoomMap = itunibo.planner.plannerUtil.getMap()
		   resource.setProperty(\"RoomMap\", RoomMap) "]		
 		}
    }
    Transition t2
    	whenReply grabbed -> bottleGrabbed
    	whenReply stepdone -> backCompensationDone
    	
    State backCompensationDone {
    } Goto emptingBox if "(wasABottle)" else doNextStep //TODO emptingBox
    
    //Split rotation, reuse doStep and rotate only if !completedPerimeter
    State doNextStep {
    	if "(!completedPerimeter)" {
	    	forward smartrobot -m cmd : cmd(a)
	    	run itunibo.planner.moveUtils.rotateLeft90(myself)
	    	delay 1000
    	}
    } 
    Goto doStep if "(!completedPerimeter)" else resetPlan
    	
    State bottleGrabbed {
    	onMsg(grabbed : grabbed(X)) {
    		if "(payloadArg(0) == \"true\")" {
 				println("detector grabbed a bottle")
 				[" SpaceAvailable -= 1
		   		   resource.setProperty(\"SpaceAvailable\", SpaceAvailable.toString()) "]
 			} else {
 				println("FATAL ERROR: detector can't grab the object")
 				["System.exit(0)"]
 			}
 			request smartrobot -m backstep : backstep($BackStepTime)
    	}
    }
    Transition t3
    	 whenReply stepdone -> boundary
	
	State boundaryFound {
		run itunibo.planner.plannerUtil.saveMap(mapname)
		["completedPerimeter = true"]
		println("detector finished the boundary")   
  	} Goto exploringWithPlan
  	
  	State resetPlan {
  		["nextMoves = listOf<String>().iterator()"]
  	} Goto exploringWithPlan
  	
  	State exploringWithPlan {
  		if "(!nextMoves.hasNext())" {
  		  ["val (x,y) = itunibo.planner.plannerUtil.getNextDirtyCell()
		  println(\"goto [$x, $y]\")
		  itunibo.planner.plannerUtil.setGoal(x.toString(), y.toString())
		  nextMoves = itunibo.planner.plannerUtil.getPlanMoves() "] //can throw exception
  		} 
  	} Goto takeNextMove
  	
  	State takeNextMove {
  		["nextMove = \"\" "]
  		if "(nextMoves.hasNext())" {
  			["nextMove = nextMoves.next()"]
  			println(nextMove)
  		}
  	} Goto checkStep if "(nextMove != \"\" )" else exploringWithPlan
  	
  	State checkStep {
  	} Goto doStep if "(nextMove == \"w\")" else checkRight
  	
  	State checkRight {
  	} Goto rotateRight if "(nextMove == \"d\")" else checkLeft
  	
  	State rotateRight {
  		forward smartrobot -m cmd : cmd(d)
		run itunibo.planner.moveUtils.rotateRight90(myself)
		delay 1000
  	} Goto exploringWithPlan
  	
  	State checkLeft {
  	} Goto rotateLeft if "(nextMove == \"a\")" else exploringWithPlan
  	
  	State rotateLeft {
  		forward smartrobot -m cmd : cmd(a)
	    run itunibo.planner.moveUtils.rotateLeft90(myself)
	    delay 1000
  	} Goto exploringWithPlan
	
	State emptingBox {
		//execute the task: Empty the detectorBox.
	}
	
	State goingHome {
		//execute the task: Go to home.
	}
	
	State terminating {
		//execute the task: Terminate the work.
	}
}