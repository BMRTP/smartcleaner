System smartcleaner

Dispatch cmd      : cmd(X)

Event    sonar    : sonar(DISTANCE)
Event    obstacle : obstacle(DISTANCE)

Request  grab     : grab(X)
Reply    grabbed  : grabbed(X) //true, false

Request  step     : step(DURATION)
Reply    stepdone : stepdone(X)
Reply    stepfail : stepfail(DURATION)  

Request getobstacletype : getobstacletype(X)
Reply   obstacletype    : obstacletype(X)

Context ctxRobot ip [ host= "localhost" port= 8018 ]  
   
CodedQActor robotadapter context ctxRobot className "itunibo.robot.robotAdapterQa"
		
QActor basicrobot context ctxRobot { 

	State s0 initial {
		println("basicrobot starts")
	}
	Goto work    
	
	State work{ println("basicrobot waiting for a command... ")}
	Transition t0 
			whenMsg cmd          -> handleCmd
			whenEvent obstacle   -> handleObstacle
   
	State handleCmd {    
		onMsg( cmd : cmd(X) ){
			println("basicrobot handle ${payloadArg(0)}")
 			forward robotadapter -m cmd : cmd($payloadArg(0))
		}
	}
	Goto work
	
	State handleObstacle{
		forward robotadapter -m cmd : cmd(h)
		println("basicrobot stops (for safety) since obstacle")
 	}
	Goto work
}

QActor obstacleclassifier context ctxRobot {
	State s0 initial {
		println("obstacleclassifier starts")
	}
	Goto work
	
	State work { println("obstacleclassifier waiting for a request... ") }
	Transition t0 
		whenRequest getobstacletype -> handleGetObstacleType
		
	State handleGetObstacleType {
		println("obstacleclassifier received a request")
		onMsg(getobstacletype : getobstacletype(X)) {
	 		request robotadapter -m getobstacletype : getobstacletype($payloadArg(0))
		}
	}
	Transition t1
		whenReply  obstacletype -> handleObstacleType
		
	State handleObstacleType {
		onMsg(obstacletype : obstacletype(X)) {
			println("obstacleclassifier perceived ${payloadArg(0)}")
			replyTo getobstacletype with obstacletype : obstacletype($payloadArg(0))
		}
	}
	Goto work
}

QActor sonar context ctxRobot {
	State s0 initial {
		println("sonar starts")
	}
	Goto work
	
	State work { println("sonar waiting for a distance... ") }
	Transition t0 
		whenEvent sonar   -> checkdistance
	
	State checkdistance {
		onMsg(sonar : sonar(X)) {
	 			if "(payloadArg(0).toDouble() <= 10)" {
	 				println("sonar finds an obstacle... ")
	 				emit obstacle : obstacle($payloadArg(0))
	 			}
		}
		delay 100
	}
	Goto work
}

QActor grabber context ctxRobot {
	State s0 initial {
		println("grabber starts")
	}
	Goto work
	State work { println("grabber waiting for a grab command... ") }
	Transition t0
		whenRequest grab -> handlegrab
		
	State handlegrab {
		onMsg(grab : grab(X)) {
			request robotadapter -m grab : grab(it)
		}
	} Transition t1
		whenReply grabbed -> handleresponse
		
	State handleresponse {
		onMsg(grabbed : grabbed(X)) {
			if "(payloadArg(0) == \"true\")" {
				println("grabber grabs a bottle... ")
				replyTo grab with grabbed : grabbed(true)
			} else {
				println("grabber can't grab the object... ")
				replyTo grab with grabbed : grabbed(false)
			}
		}
	}
	Goto work
}

QActor smartrobot context ctxRobot {
[" 
   var StepTime      = 0L
   var Duration      = 0 
"]  	
	State s0 initial{
 		println("smartrobot starts")
	}
	Goto work 
	
	State work{ println("smartrobot waiting for a command...") } 
	Transition s0 
 			whenMsg cmd      -> handleCmd
 			whenRequest step -> doStep
 			
	State handleCmd {
		onMsg(cmd : cmd(X)){ 
			forward basicrobot -m cmd : cmd($payloadArg(0))
		}
	} 
	Goto work 
	
	State doStep { 
		onMsg(step : step(T)){
			["StepTime = payloadArg(0).toLong() 
 			  startTimer()"]
 			println("smartrobot is doing a $StepTime ms step")
			forward basicrobot -m cmd : cmd(w)
		}  
	}  
	Transition t0 
		whenTimeVar StepTime  -> stepDone	
		whenEvent obstacle    -> stepFail
 	
	State stepDone {
		forward basicrobot -m cmd : cmd(h) 
 		replyTo step with stepdone : stepdone(ok)
  	}
	Goto work 

	State stepFail{
		["Duration=getDuration()"]
		replyTo step with stepfail : stepfail($Duration)
   	}
	Goto work
}
